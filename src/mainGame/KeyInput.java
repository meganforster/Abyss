package mainGame;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.Random;

import javax.swing.JOptionPane;

import kuusisto.tinysound.TinySound;
import mainGame.Game.STATE;

/**
 * Handles key input from the user
 * 
 * @author Brandon Loehle 5/30/16
 *
 */

public class KeyInput extends KeyAdapter {

	// Instance Variables
	private Handler handler;
	private boolean[] keyDown = new boolean[5];
	private int speed;
	private Game game;
	private HUD hud;
	private Player player;
	private Spawn1to10 spawner;
	private Upgrades upgrades;
	private String ability;
	private boolean play;
	Random r = new Random(); //used when player presses "E"

	// Constructor
	public KeyInput(Handler handler, Game game, HUD hud, Player player, Spawn1to10 spawner, Upgrades upgrades) {
		this.handler = handler;
		this.speed = Player.playerSpeed;
		this.game = game;
		this.player = player;
		this.hud = hud;
		this.spawner = spawner;
		this.upgrades = upgrades;
		keyDown[0] = false;
		keyDown[1] = false;
		keyDown[2] = false;
		keyDown[3] = false;
		keyDown[4] = false;

	}

	// Sets variable to the keycode generated by the key press
	public void keyPressed(KeyEvent e) {
		int key = e.getKeyCode();
		this.speed = Player.playerSpeed;

		// Esc key to exit game entirely
		if (key == KeyEvent.VK_ESCAPE) {
			TinySound.shutdown(); //Turns TinySound "off"
			System.exit(0);
		}

		//Displays one of four results randomly, I checked 
		if(key==KeyEvent.VK_E) {
			int joke = r.nextInt(4)*1;
			switch(joke){
			case 1:
				System.out.println("Q: What does Tarzan say when he sees a herd of elephants in the distance?\r\n" + 
						"A: “Look, a herd of elephants in the distance”\r\n" + 
						"\r\n" + 
						"Q: What does Tarzan say when he sees a herd of elephants with sunglasses\r\n" + 
						"A: Nothing. He doesn’t recognize them.\r\n" + 
						"\r\n" + 
						"Q: What does Tarzan say when he sees a herd of giraffes in the distance?\r\n" + 
						"A: “Haha! You fooled me once with those disguises, but not this time!”\n");
				break;
			case 2:
				System.out.println("Q. Why do ducks have webbed feet?\r\n" + 
						"A. To stomp out forest fires.\r\n" + 
						"\r\n" + 
						"Q. Why do elephants have large feet?\r\n" + 
						"A. To stomp out flaming ducks!\n");
				break;
			
			case 3:
				System.out.println("Q. Why did the elephant fall out of the tree?\r\n" + 
						"A. Because it was dead.\r\n" + 
						"\r\n" + 
						"Q. Why did the second elephant fall out of the tree?\r\n" + 
						"A. It was stapled to the first elephant.\r\n" + 
						"\r\n" + 
						"Q. Why did the third elephant fall out of the tree?\r\n" + 
						"A. Peer pressure.\r\n" + 
						"\r\n" + 
						"Q. Why did the tree fall down?\r\n" + 
						"A. It thought it was an elephant.\n");
				break;
			default: 
				System.out.println("You do not have the elephant's favor, no joke for you!\n");
			}	
			
		}
		// Finds what key strokes associate with Player
		for (int i = 0; i < handler.object.size(); i++) {
			GameObject tempObject = handler.object.get(i);

			if (tempObject.getId() == ID.Player) {

				// Code for using arrow keys and WASD to move
				if (key == KeyEvent.VK_W || key == KeyEvent.VK_UP) {
					tempObject.setVelY(-(this.speed));
					keyDown[0] = true;
				}
				if (key == KeyEvent.VK_A || key == KeyEvent.VK_LEFT) {
					tempObject.setVelX(-(this.speed));
					keyDown[1] = true;
				}
				if (key == KeyEvent.VK_S || key == KeyEvent.VK_DOWN) {
					tempObject.setVelY(this.speed);
					keyDown[2] = true;
				}
				if (key == KeyEvent.VK_D || key == KeyEvent.VK_RIGHT) {
					tempObject.setVelX(this.speed);
					keyDown[3] = true;
				}

				// Code for using space to shoot
				if (key == KeyEvent.VK_SPACE) {
					double velX = tempObject.getVelX();
					double velY = tempObject.getVelY();
					double x = tempObject.getX() + 8;
					double y = tempObject.getY() + 5;

					// Allows shooting when not moving
					if (velX == 0 && velY == 0) {
						velY = 10;
					}
					
					//Creates the player bullet
					handler.addObject(new PlayerBullet((int) x, (int) y, velX, velY, ID.PlayerBullet, handler));

				}

				//P to pause 
				if (key == KeyEvent.VK_P) { 
					if(game.gameState == STATE.Pause)
						game.gameState = STATE.Game;
					else if(game.gameState == STATE.Game)
						game.gameState = STATE.Pause;

				}
				
				//H for help menu
				if (key == KeyEvent.VK_H) {
					game.gameState = STATE.Pause;
					JOptionPane.showMessageDialog(game,
							game.message); //String variable in game that holds the game instructions
				}

				//Enter to use an upgrade 
				if (key == KeyEvent.VK_ENTER) {
					ability = upgrades.getAbility();
					if (ability.equals("clearScreen")) {
						upgrades.clearScreenAbility();
					} else if (ability.equals("levelSkip")) {
						upgrades.levelSkipAbility();
					} else if (ability.equals("freezeTime")) {
						upgrades.freezeTimeAbility();
					}
				}
			}

		}

	}
	
	//Code for releasing a key press
	public void keyReleased(KeyEvent e) {
		int key = e.getKeyCode(); //gets the keycode of the key released

		for (int i = 0; i < handler.object.size(); i++) {
			GameObject tempObject = handler.object.get(i);

			if (tempObject.getId() == ID.Player) {
				
				//Corrects for diagonal movement 
				if (key == KeyEvent.VK_W || key == KeyEvent.VK_UP)
					keyDown[0] = false;
				if (key == KeyEvent.VK_A || key == KeyEvent.VK_LEFT)
					keyDown[1] = false;
				if (key == KeyEvent.VK_S || key == KeyEvent.VK_DOWN)
					keyDown[2] = false;
				if (key == KeyEvent.VK_D || key == KeyEvent.VK_RIGHT) {
					keyDown[3] = false;
					keyDown[4] = false;
				}

				
				if (!keyDown[0] && !keyDown[2])
					tempObject.setVelY(0);
				
				if (!keyDown[1] && !keyDown[3])
					tempObject.setVelX(0);
			}

		}

	}

}
