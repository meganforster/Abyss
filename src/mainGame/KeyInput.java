package mainGame;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import javax.swing.JOptionPane;

import mainGame.Game.STATE;

/**
 * Handles key input from the user
 * 
 * @author Brandon Loehle 5/30/16
 *
 */

public class KeyInput extends KeyAdapter {

	// Instance Variables
	private Handler handler;
	private boolean[] keyDown = new boolean[5];
	private int speed;
	private Game game;
	private HUD hud;
	private Player player;
	private Spawn1to10 spawner;
	private Upgrades upgrades;
	private String ability;
	private boolean play;

	// Constructor
	public KeyInput(Handler handler, Game game, HUD hud, Player player, Spawn1to10 spawner, Upgrades upgrades) {
		this.handler = handler;
		this.speed = Player.playerSpeed;
		this.game = game;
		this.player = player;
		this.hud = hud;
		this.spawner = spawner;
		this.upgrades = upgrades;
		keyDown[0] = false;
		keyDown[1] = false;
		keyDown[2] = false;
		keyDown[3] = false;
		keyDown[4] = false;

	}

	// Sets variable to the keycode generated by the key press
	public void keyPressed(KeyEvent e) {
		int key = e.getKeyCode();
		this.speed = Player.playerSpeed;

		// Esc key to exit game entirely
		if (key == KeyEvent.VK_ESCAPE) {
			System.exit(0);
		}

		// Finds what key strokes associate with Player
		for (int i = 0; i < handler.object.size(); i++) {
			GameObject tempObject = handler.object.get(i);

			if (tempObject.getId() == ID.Player) {

				// Code for using arrow keys and WASD to move
				if (key == KeyEvent.VK_W || key == KeyEvent.VK_UP) {
					tempObject.setVelY(-(this.speed));
					keyDown[0] = true;
				}
				if (key == KeyEvent.VK_A || key == KeyEvent.VK_LEFT) {
					tempObject.setVelX(-(this.speed));
					keyDown[1] = true;
				}
				if (key == KeyEvent.VK_S || key == KeyEvent.VK_DOWN) {
					tempObject.setVelY(this.speed);
					keyDown[2] = true;
				}
				if (key == KeyEvent.VK_D || key == KeyEvent.VK_RIGHT) {
					tempObject.setVelX(this.speed);
					keyDown[3] = true;
				}

				// Code for using space to shoot
				if (key == KeyEvent.VK_SPACE) {
					double velX = tempObject.getVelX();
					double velY = tempObject.getVelY();
					double x = tempObject.getX() + 8;
					double y = tempObject.getY() + 5;

					// Allows shooting when not moving
					if (velX == 0 && velY == 0) {
						velY = 10;
					}
					
					//Creates the player bullet
					handler.addObject(new PlayerBullet((int) x, (int) y, velX, velY, ID.PlayerBullet, handler));

				}

				//P to pause 
				if (key == KeyEvent.VK_P) { 
					if(game.gameState == STATE.Pause)
						game.gameState = STATE.Game;
					else if(game.gameState == STATE.Game)
						game.gameState = STATE.Pause;

				}
				
				//H for help menu
				if (key == KeyEvent.VK_H) {
					game.gameState = STATE.Pause;
					JOptionPane.showMessageDialog(game,
							game.message); //String variable in game that holds the game instructions
				}

				//Enter to use an upgrade 
				if (key == KeyEvent.VK_ENTER) {
					ability = upgrades.getAbility();
					if (ability.equals("clearScreen")) {
						upgrades.clearScreenAbility();
					} else if (ability.equals("levelSkip")) {
						upgrades.levelSkipAbility();
					} else if (ability.equals("freezeTime")) {
						upgrades.freezeTimeAbility();
					}
				}
			}

		}

	}
	
	//Code for releasing a key press
	public void keyReleased(KeyEvent e) {
		int key = e.getKeyCode(); //gets the keycode of the key released

		for (int i = 0; i < handler.object.size(); i++) {
			GameObject tempObject = handler.object.get(i);

			if (tempObject.getId() == ID.Player) {
				
				//Corrects for diagonal movement 
				if (key == KeyEvent.VK_W || key == KeyEvent.VK_UP)
					keyDown[0] = false;
				if (key == KeyEvent.VK_A || key == KeyEvent.VK_LEFT)
					keyDown[1] = false;
				if (key == KeyEvent.VK_S || key == KeyEvent.VK_DOWN)
					keyDown[2] = false;
				if (key == KeyEvent.VK_D || key == KeyEvent.VK_RIGHT) {
					keyDown[3] = false;
					keyDown[4] = false;
				}

				
				if (!keyDown[0] && !keyDown[2])
					tempObject.setVelY(0);
				
				if (!keyDown[1] && !keyDown[3])
					tempObject.setVelX(0);
			}

		}

	}

}
